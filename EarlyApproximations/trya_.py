# -*- coding: utf-8 -*-
"""tryA*

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ynuSiJkRSEqDkWy0-KLv_RPKqLoEZo9l
"""

import numpy as np
import random
import copy
import math
def movs(grid,empty):
    counter = 0
    moves = []
    x = int(empty[0])
    y = int(empty[1])
    if(x + 1 < 3):
      copyGrid = np.copy(grid)
      tempVal = copyGrid[x,y] 
      copyGrid[x,y] = copyGrid[x+1,y]
      copyGrid[x+1,y] = tempVal
      moves.append(copyGrid)
    if(x - 1 >= 0):
      copyGrid = np.copy(grid)
      tempVal = copyGrid[x,y]
      copyGrid[x,y] = copyGrid[x-1,y]
      copyGrid[x-1,y] = tempVal
      moves.append(copyGrid)
    if(y + 1 < 3):
      copyGrid = np.copy(grid)
      tempVal = copyGrid[x,y]
      copyGrid[x,y] = copyGrid[x,y+1]
      copyGrid[x,y+1] = tempVal
      moves.append(copyGrid)
    if(y - 1 >= 0):
      copyGrid = np.copy(grid)
      tempVal = copyGrid[x,y]
      copyGrid[x,y] = copyGrid[x,y-1]
      copyGrid[x,y-1] = tempVal
      moves.append(copyGrid)
    return moves

def heurDist(grid):
    distAcum = 0
    empty = returnEmpty(grid)
    x=empty[0]
    y=empty[1]
    x = int(x)
    y = int(y)
    for i in range(0,3):
      for j in range(0,3):
        tempCord = valToPos(grid[i,j])
        if (tempCord[0] == i or tempCord[1] == j):
          distAcum = distAcum + (abs(tempCord[0] - i) + abs(tempCord[1] - j))
        elif((abs(tempCord[0] - i) + abs(tempCord[1] - j)) == 2):
          distAcum = distAcum + 2
        else:
          distAcum = distAcum + 4
        if ((i==j) and i==0):
          if grid[i,j] == 1 :
            distAcum = distAcum - 6
          if grid[0,1] == 2 :
            distAcum = distAcum - 5
          if grid[0,2] == 3 :
            distAcum = distAcum - 4    
        if(grid[i,j]==1 and (i!=0 or j!= 0)):
            distAcum = distAcum + i + j + 1
            if(empty[0] == 0 and j==empty[1]):
              distAcum = distAcum - 5
            if(i>1):
              distAcum = distAcum + 100
    print('peso es:')
    print(distAcum)
    print('')

    return distAcum    

def position(x,y):
    if(x==0):
        pos = y+1
    elif(x==1):
        pos = 3+y+1
    else:
        if(y==2):
          pos = 0
        else:
          pos = 6+y+1
    return pos

def valToPos(val):
    pos = np.zeros((2))
    if val <= 3 :
      x = 0
      y = val -1
    elif val <= 6 :
      x = 1
      y = val -4
    else:
      x = 2
      y = val - 7
    pos[0] = int (x)
    pos[1] = int (y)
    return pos




def returnEmpty(grid):
    x = 14
    y = 14
    for i in range(0,3):
        for j in range(0,3):
            if(grid[i,j] == 0):
                x = i
                y = j
                break
    empty = np.zeros((2))
    empty[0] = int(x)
    empty[1] = int(y)
    return empty

def lowestF(openSet,close):
    eIndex = 0
    lt = 0
    gridF = 0
    lowestFs = 99999
    empty = np.zeros((3,3))
    lGrid = np.zeros((3,3)) 
    for grid in openSet:
      print('')
      print('---------')
      print('')
      gridF = math.floor(heurDist(grid))
      if(lowestFs>gridF and listFind(close,grid)):
        lowestFs = gridF
        lGrid = np.copy(grid)
    if ((lGrid == empty).all()):
      for grid in openSet:
        gridF = math.floor(heurDist(grid))
        if(lowestFs>gridF):
          lowestFs = gridF
          lGrid = np.copy(grid)
          lt = 1
      for element in close:
        if ((element==lGrid).all()):
          del close[eIndex]
        eIndex = eIndex + 1
    return lGrid

def listFind(close,grid):
    for element in close:
      if((element==grid).all()):
        return False
    return True

def a_Star(grid,gridFinal):
    #first position of empty spot
    empty = returnEmpty(grid)
    openSet = movs(grid,empty)
    index = 0
    cameFrom = []
    cameFrom.insert(index,grid)
    #gScoreIndex necesary for track the path
    gScore = []
    gScore.insert(index,0)
    #fScoreIndex necesary for track the path
    fScore = []    
    fScore.insert(index,heurDist(grid)) 
    close = []
    while (len(openSet) != 0):
        tentScore = 99999
        tempSet = copy.deepcopy(openSet)
        if(index>0):
          current = newNeighbor
        else:
          current = lowestF(tempSet,close)
        print('')
        print('current')
        print('')
        print(current)
        print('')
        close.append(current)
        tempCurr = np.copy(current)
        if (current == gridFinal).all():
            cameFrom.append(current)
            return cameFrom
        neighbors = movs(tempCurr,returnEmpty(tempCurr))
        indexSet = 0
        print('')
        print('Set')
        print(openSet)
        print('')
        print('')
        print('vecinos')
        print(neighbors)
        print('')
        for option in openSet:
            if((option==current).all()):
              del openSet[indexSet]
            indexSet = indexSet +1
        for neighbor in neighbors:
          print('')
          print('neighbor')
          print('')
          print(neighbor)
          print('')
          nScore = heurDist(neighbor)
          if(tentScore > nScore):
            tentScore = nScore
            cameFrom.insert(index + 1, current)
            fScore.insert(index + 1,tentScore)
            sw = 0
            # for option in openSet:
            #   if((option==neighbor).all()):
            #     sw = 1
            #     print('')
            #     print('ya en set')
            #     print('')
            #   if(sw==0):
            openSet.clear()
            newNeighbor = np.copy(neighbor)
        index = index + 1
        print('')
        print('escogido')
        print('')
        print(newNeighbor)
        print('')
        openSet = movs(newNeighbor,returnEmpty(newNeighbor))
        # openSet.append(newNeighbor)
        if(index > 6):
          return 0
    return 0




gridFinal = np.zeros((3,3))
count = 0
for i in range (0,3):
    for j in range (0,3):
        if count < 8:
            count = count + 1
            gridFinal[i,j] = int(count) 
        else:
            gridFinal[i,j] = 0

grid =np.array([[6, 4, 2],[7, 3, 1],[8, 5, 0],])
empty = np.zeros((2))
empty[0] = 2
empty[1] = 2
print(grid)
print('')
path = a_Star(grid,gridFinal)
for paso in path:
  print('')
  print('')
  print(paso)

# heurDist(grid)